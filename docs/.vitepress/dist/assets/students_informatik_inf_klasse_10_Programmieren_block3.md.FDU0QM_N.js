import{_ as i,c as n,a2 as a,o as e}from"./chunks/framework.BQmytedh.js";const E=JSON.parse('{"title":"Inputs, Funktionen & Bibliotheken","description":"Interaktive Programme mit Benutzereingaben, eigene Funktionen schreiben und externe Bibliotheken nutzen.","frontmatter":{"title":"Inputs, Funktionen & Bibliotheken","description":"Interaktive Programme mit Benutzereingaben, eigene Funktionen schreiben und externe Bibliotheken nutzen."},"headers":[],"relativePath":"students/informatik/inf_klasse_10/Programmieren/block3.md","filePath":"students/informatik/inf_klasse_10/Programmieren/block3.md","lastUpdated":1753078044000}'),l={name:"students/informatik/inf_klasse_10/Programmieren/block3.md"};function t(h,s,p,r,k,d){return e(),n("div",null,s[0]||(s[0]=[a(`<div class="info custom-block"><p class="custom-block-title">Definition: Funktionen</p><p>Eine Funktion ist ein wiederverwendbarer Codeblock, der eine bestimmte Aufgabe erfüllt. Funktionen können Parameter entgegennehmen und Werte zurückgeben.</p></div><h2 id="ziele" tabindex="-1">Ziele <a class="header-anchor" href="#ziele" aria-label="Permalink to &quot;Ziele&quot;">​</a></h2><ul><li>Programme interaktiv mit Benutzereingaben gestalten</li><li>Eigene Funktionen definieren und verwenden</li><li>Parameter und Rückgabewerte verstehen</li><li>Externe Bibliotheken importieren und nutzen</li></ul><h2 id="benutzereingaben-mit-input" tabindex="-1">Benutzereingaben mit input() <a class="header-anchor" href="#benutzereingaben-mit-input" aria-label="Permalink to &quot;Benutzereingaben mit input()&quot;">​</a></h2><p>Bisher waren alle unsere Programme statisch - die Werte der Variablen haben wir fest im Code definiert. Richtig spannend wird es erst, wenn der Benutzer selbst Werte eingeben kann! Dafür gibt es in Python die <code>input()</code> Funktion.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wie heißt du? &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hallo &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><details class="details custom-block"><summary>Erklärung</summary><p>Die <code>input()</code> Funktion pausiert das Programm und wartet auf eine Eingabe des Benutzers. Der Text in den Anführungszeichen wird als Aufforderung angezeigt. Sobald der Benutzer etwas eingibt und Enter drückt, wird die Eingabe als String in der Variable <code>name</code> gespeichert.</p></details><div class="warning custom-block"><p class="custom-block-title">Wichtiger Hinweis</p><p>Die <code>input()</code> Funktion gibt <strong>immer</strong> einen String (Zeichenkette) zurück, auch wenn der Benutzer eine Zahl eingibt. Möchtest du mit der Eingabe rechnen, musst du sie erst zu einer Zahl umwandeln! Dies funktioniert mit einem sogenannten <strong>Cast</strong> (Umwandlung). Benötigst du bei der Eingabe eine ganze Zahl mit der du rechnen oder zählen möchtest, so castest du die Eingabe wie folgt: <code>eingabe = int(input(&quot;Ich brauche eine ganze Zahl:&quot;))</code>. Benötigst du eine Gleitkommazahl, so nimmst du <code>eingabe = float(input(&quot;Bitte eine Gleitkommazahl:&quot;))</code>. Das selbe gilt auch für Strings.</p></div><h3 id="eingaben-zu-zahlen-umwandeln" tabindex="-1">Eingaben zu Zahlen umwandeln <a class="header-anchor" href="#eingaben-zu-zahlen-umwandeln" aria-label="Permalink to &quot;Eingaben zu Zahlen umwandeln&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alter_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wie alt bist du? &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alter_text)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># String zu Integer umwandeln</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du bist volljährig!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du bist noch minderjährig.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Noch kürzer geht es so:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wie alt bist du? &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du bist volljährig!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du bist noch minderjährig.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="info custom-block"><p class="custom-block-title">Aufgabe</p><p>Schreibe ein Programm, das den Benutzer nach seinem Namen, seinem Alter und seinem Lieblingsfach fragt. Tobi soll dann eine personalisierte Nachricht schreiben wie: &quot;Hallo Max, cool dass du Informatik magst!&quot;</p></div><h2 id="funktionen-definieren" tabindex="-1">Funktionen definieren <a class="header-anchor" href="#funktionen-definieren" aria-label="Permalink to &quot;Funktionen definieren&quot;">​</a></h2><p>Du kennst bereits viele Funktionen: <code>t.forward()</code>, <code>t.left()</code>, <code>input()</code>, <code>int()</code> usw. Funktionen geben dir die Möglichkeit, Programmcode an verschiedenen Stellen mit geringem Aufwand wiederzuverwenden. Möchtest du, dass Tobi vorwärst läuft, so nutzt du mit geringem Aufwand <code>t.forward()</code> und Tobi bewegt sich über den Bildschirm. Wir können Funktionen auch selbst schreiben und aufrufen.</p><h3 id="einfache-funktionen-ohne-parameter" tabindex="-1">Einfache Funktionen ohne Parameter <a class="header-anchor" href="#einfache-funktionen-ohne-parameter" aria-label="Permalink to &quot;Einfache Funktionen ohne Parameter&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dreieck_zeichnen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():  </span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):   </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.left(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Funktion aufrufen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dreieck_zeichnen()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dreieck_zeichnen()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><details class="details custom-block"><summary>Erklärung</summary><p>Mit <code>def</code> definieren wir eine neue Funktion namens <code>dreieck_zeichnen</code>. Der Code in der Funktion wird erst ausgeführt, wenn wir sie mit <code>dreieck_zeichnen()</code> aufrufen. So können wir den gleichen Code mehrmals verwenden, ohne ihn zu wiederholen.</p></details><h3 id="funktionen-mit-parametern" tabindex="-1">Funktionen mit Parametern <a class="header-anchor" href="#funktionen-mit-parametern" aria-label="Permalink to &quot;Funktionen mit Parametern&quot;">​</a></h3><p>Noch praktischer werden Funktionen, wenn wir ihnen Werte übergeben können:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quadrat_zeichnen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(groesse):  </span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):          </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.forward(groesse)      </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.left(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)              </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verschiedene Quadrate zeichnen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quadrat_zeichnen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quadrat_zeichnen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="funktionen-mit-mehreren-parametern" tabindex="-1">Funktionen mit mehreren Parametern <a class="header-anchor" href="#funktionen-mit-mehreren-parametern" aria-label="Permalink to &quot;Funktionen mit mehreren Parametern&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rechteck_zeichnen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(breite, hoehe):  </span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):                 </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.forward(breite)              </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.left(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                     </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.forward(hoehe)               </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t.left(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                     </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rechteck_zeichnen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rechteck_zeichnen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="info custom-block"><p class="custom-block-title">Aufgabe</p><p>Schreibe eine Funktion <code>stern_zeichnen(groesse)</code>, die einen 5-zackigen Stern zeichnet. Ein Stern entsteht, wenn du 5 Mal folgendes machst: vorwärts gehen, dann 144 Grad nach rechts drehen. Die Kanten des Sterns sollen eine Länge von 50 haben. Verändere das funktionierende Programm so, dass der User die Größe selbst bestimmen kann.</p></div><h3 id="funktionen-mit-ruckgabewerten" tabindex="-1">Funktionen mit Rückgabewerten <a class="header-anchor" href="#funktionen-mit-ruckgabewerten" aria-label="Permalink to &quot;Funktionen mit Rückgabewerten&quot;">​</a></h3><p>Funktionen können auch Werte zurückgeben, die wir in unserem Programm weiterverwenden:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quadrat_umfang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seitenlaenge):  </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    umfang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seitenlaenge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> umfang                  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Funktion verwenden</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">umfang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quadrat_umfang(seite)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.write(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Umfang: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">umfang</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="info custom-block"><p class="custom-block-title">Aufgabe</p><p>Schreibe eine Funktion <code>kreis_flaeche(radius)</code>, die die Fläche eines Kreises berechnet und zurückgibt. Die Formel ist: Fläche = 3.14159 * radius * radius. Lass Tobi das Ergebnis für einen Radius von 10 anzeigen.</p></div><div class="info custom-block"><p class="custom-block-title">Aufgabe</p><p>Erstelle ein interaktives Python-Programm, das ein beliebiges regelmäßiges Polygon zeichnet. Dein Programm soll folgende Anforderungen erfüllen:</p><p>Schreibe eine Funktion polygon_zeichnen, die</p><ul><li>zwei Parameter erwartet: die Anzahl der Seiten und die Länge jeder Seite,</li><li>automatisch den passenden Innenwinkel berechnet,</li><li>und mithilfe einer Schleife das Polygon zeichnet.</li></ul><p>Frage den Benutzer oder die Benutzerin über die Konsole interaktiv:</p><ul><li>Wie viele Seiten das Polygon haben soll (z. B. 3 für ein Dreieck, 4 für ein Quadrat usw.),</li><li>und wie lang die Seiten sein sollen.</li></ul><p>Rufe anschließend deine Funktion mit den eingegebenen Werten auf, sodass das gewünschte Polygon auf dem Bildschirm erscheint.</p><p>💡 Hinweis: Überlege dir, wie du den Drehwinkel berechnest, damit das Polygon geschlossen wird.</p></div><h2 id="externe-bibliotheken" tabindex="-1">Externe Bibliotheken <a class="header-anchor" href="#externe-bibliotheken" aria-label="Permalink to &quot;Externe Bibliotheken&quot;">​</a></h2><p>Python wird durch Bibliotheken noch mächtiger. Eine Bibliothek ist eine Sammlung von Funktionen, die andere Programmierer geschrieben haben.</p><h3 id="die-random-bibliothek" tabindex="-1">Die random-Bibliothek <a class="header-anchor" href="#die-random-bibliothek" aria-label="Permalink to &quot;Die random-Bibliothek&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Zufällige Zahlen generieren</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zufallszahl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.randint(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.write(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Würfel: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zufallszahl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.pendown()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Zufällige Farbe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">farben </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;purple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zufalls_farbe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.choice(farben)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.color(zufalls_farbe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.circle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="die-math-bibliothek" tabindex="-1">Die math-Bibliothek <a class="header-anchor" href="#die-math-bibliothek" aria-label="Permalink to &quot;Die math-Bibliothek&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Mathematische Funktionen nutzen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">umfang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math.pi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius  </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flaeche </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math.pi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.write(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kreis: Umfang = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">umfang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.1f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.write(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fläche = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flaeche</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.1f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><details class="details custom-block"><summary>Nützliche Funktionen</summary><p><strong>random-Bibliothek:</strong></p><ul><li><code>random.randint(a, b)</code>: Zufällige ganze Zahl zwischen a und b</li><li><code>random.choice(liste)</code>: Zufälliges Element aus einer Liste</li><li><code>random.random()</code>: Zufällige Kommazahl zwischen 0 und 1</li></ul><p><strong>math-Bibliothek:</strong></p><ul><li><code>math.pi</code>: Die Zahl Pi (3.14159...)</li><li><code>math.sqrt(x)</code>: Quadratwurzel von x</li><li><code>math.pow(x, y)</code>: x hoch y</li></ul></details><h2 id="aufgaben" tabindex="-1">Aufgaben <a class="header-anchor" href="#aufgaben" aria-label="Permalink to &quot;Aufgaben&quot;">​</a></h2><p>Löse die folgenden Aufgaben selbstständig oder mit einem Partner oder Partnerin.</p><h3 id="aufgabe-1-taschenrechner" tabindex="-1">Aufgabe 1: Taschenrechner <a class="header-anchor" href="#aufgabe-1-taschenrechner" aria-label="Permalink to &quot;Aufgabe 1: Taschenrechner&quot;">​</a></h3><p>Schreibe ein interaktives Taschenrechner-Programm, das:</p><ol><li>Den Benutzer nach zwei Zahlen fragt</li><li>Nach der gewünschten Operation fragt (+, -, *, /)</li><li>Das Ergebnis mit Tobi auf dem Bildschirm anzeigt</li></ol><p>Verwende dafür eine Funktion <code>rechnen(zahl1, zahl2, operation)</code>.</p><h3 id="aufgabe-2-zufalliges-kunstwerk" tabindex="-1">Aufgabe 2: Zufälliges Kunstwerk <a class="header-anchor" href="#aufgabe-2-zufalliges-kunstwerk" aria-label="Permalink to &quot;Aufgabe 2: Zufälliges Kunstwerk&quot;">​</a></h3><p>Erstelle ein Programm, das ein zufälliges Kunstwerk zeichnet:</p><ul><li>Zeichne 10 Kreise mit zufälligen Größen (zwischen 10 und 50)</li><li>Jeder Kreis soll eine zufällige Farbe haben</li><li>Die Position jedes Kreises soll zufällig sein</li><li>Verwende eine Funktion <code>zufalls_kreis()</code></li></ul><details class="details custom-block"><summary>Tipp</summary><p>Nutze <code>t.goto(x, y)</code> mit <code>random.randint(-200, 200)</code> für zufällige Positionen.</p></details><h3 id="aufgabe-3-geometrie-quiz" tabindex="-1">Aufgabe 3: Geometrie-Quiz <a class="header-anchor" href="#aufgabe-3-geometrie-quiz" aria-label="Permalink to &quot;Aufgabe 3: Geometrie-Quiz&quot;">​</a></h3><p>Schreibe ein interaktives Quiz-Programm:</p><ol><li>Frage den Benutzer nach dem Radius eines Kreises</li><li>Berechne Umfang und Fläche mit Funktionen</li><li>Frage den Benutzer, was er für den Umfang schätzt</li><li>Vergleiche die Schätzung mit dem echten Wert</li><li>Gib eine Bewertung aus (&quot;Sehr gut!&quot; wenn Unterschied &lt; 5, &quot;Nicht schlecht!&quot; wenn &lt; 20, sonst &quot;Das war weit daneben!&quot;)</li></ol><h3 id="aufgabe-4-mustergenerator" tabindex="-1">Aufgabe 4: Mustergenerator <a class="header-anchor" href="#aufgabe-4-mustergenerator" aria-label="Permalink to &quot;Aufgabe 4: Mustergenerator&quot;">​</a></h3><p>Erstelle ein Programm, das dem Benutzer verschiedene Muster zur Auswahl anbietet:</p><ul><li>&quot;1&quot; für Spirale: Zeichnet eine Spirale mit 50 Schritten, bei jedem Schritt wird die Linie um 2 länger</li><li>&quot;2&quot; für Blume: Zeichnet 8 Kreise um einen Mittelpunkt herum</li><li>&quot;3&quot; für Stern-Explosion: Zeichnet 20 Linien vom Mittelpunkt nach außen in verschiedene Richtungen</li></ul><p>Verwende für jedes Muster eine eigene Funktion.</p><h2 id="zusammenfassung" tabindex="-1">Zusammenfassung <a class="header-anchor" href="#zusammenfassung" aria-label="Permalink to &quot;Zusammenfassung&quot;">​</a></h2><p>In diesem Block hast du gelernt:</p><ul><li><strong>Benutzereingaben</strong>: Mit <code>input()</code> können Programme interaktiv werden</li><li><strong>Eigene Funktionen</strong>: Code wiederverwendbar machen mit <code>def funktionsname():</code></li><li><strong>Parameter</strong>: Funktionen flexibel gestalten durch Übergabe von Werten</li><li><strong>Rückgabewerte</strong>: Funktionen können Ergebnisse mit <code>return</code> zurückgeben</li><li><strong>Bibliotheken</strong>: Fertige Funktionen nutzen (random, math)</li></ul><p>Mit diesen Werkzeugen kannst du bereits richtig interessante und interaktive Programme schreiben!</p>`,57)]))}const o=i(l,[["render",t]]);export{E as __pageData,o as default};
