import{_ as e,c as i,a2 as n,o as a}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"Verknüpfte Verzweigungen und while-Schleifen","description":"Komplexe Bedingungen mit logischen Operatoren und erste Schleifen mit while.","frontmatter":{"title":"Verknüpfte Verzweigungen und while-Schleifen","description":"Komplexe Bedingungen mit logischen Operatoren und erste Schleifen mit while."},"headers":[],"relativePath":"students/informatik/inf_klasse_10/Programmieren/block3.md","filePath":"students/informatik/inf_klasse_10/Programmieren/block3.md","lastUpdated":1753777403000}'),t={name:"students/informatik/inf_klasse_10/Programmieren/block3.md"};function l(r,s,h,p,d,k){return a(),i("div",null,s[0]||(s[0]=[n(`<h2 id="ziele" tabindex="-1">Ziele <a class="header-anchor" href="#ziele" aria-label="Permalink to &quot;Ziele&quot;">​</a></h2><ul><li>Bedingungen mit logischen Operatoren verknüpfen</li><li>While-Schleifen verstehen und anwenden</li><li>Komplexere Entscheidungsstrukturen programmieren</li></ul><h2 id="verknupfte-bedingungen" tabindex="-1">Verknüpfte Bedingungen <a class="header-anchor" href="#verknupfte-bedingungen" aria-label="Permalink to &quot;Verknüpfte Bedingungen&quot;">​</a></h2><p>Hitzefrei bekommt man mancherorts unter zwei Bedingungen. Die Temperatur muss im Schatten über 30 Grad Celsius betragen und es muss vor 10:00 Uhr sein. Man könnte auch sagen: wenn <code>temp &gt;= 30</code> und <code>schatten == True</code> und <code>time &lt; 10</code> müssen alle True sein.</p><p>Solche Verknüpfungen von Bedingungen sind an unsere Sprache angeknüpft wie im Beispiel zuvor gut erkenntlich. Ist Bedingung 1 True UND ist Bedingung 2 True, so tue etwas. Eine weitere Möglichkeit Bedingungen zu verknüpfen ist das logische ODER.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Operator</th><th>Name</th><th style="text-align:right;">Beispiel-Bedingung</th><th style="text-align:right;">Wert für <code>x</code>, der <code>True</code> ergibt</th><th style="text-align:right;">Wert für <code>x</code>, der <code>False</code> ergibt</th></tr></thead><tbody><tr><td style="text-align:center;"><code>and</code></td><td>Logisches UND</td><td style="text-align:right;"><code>x &gt; 0 and x &lt; 10</code></td><td style="text-align:right;"><code>5</code></td><td style="text-align:right;"><code>0</code></td></tr><tr><td style="text-align:center;"><code>or</code></td><td>Logisches ODER</td><td style="text-align:right;"><code>x &lt; 0 or x &gt; 10</code></td><td style="text-align:right;"><code>11</code></td><td style="text-align:right;"><code>5</code></td></tr><tr><td style="text-align:center;"><code>not</code></td><td>Logisches NICHT</td><td style="text-align:right;"><code>not (x == 5)</code></td><td style="text-align:right;"><code>3</code></td><td style="text-align:right;"><code>5</code></td></tr></tbody></table><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koerperhoehe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 160</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koerperhoehe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du darfst mitfahren&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du darfst NICHT mitfahren&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="info custom-block"><p class="custom-block-title">Aufgabe</p><p>Verändere das Programm so, dass die Person mitfahren darf.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koerperhoehe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koerperhoehe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du darfst mitfahren&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Du darfst NICHT mitfahren&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><h2 id="while-schleifen" tabindex="-1">While-Schleifen <a class="header-anchor" href="#while-schleifen" aria-label="Permalink to &quot;While-Schleifen&quot;">​</a></h2><p>Auch die while-Schleife kennen wir bereits von Karol.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wiederhole solange IstWand</span></span>
<span class="line"><span>  LinksDrehen</span></span>
<span class="line"><span>endewiederhole</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Hier wiederholt Karol das LinksDrehen solange bis die Bedingung nicht mehr erfüllt ist, sprich sie nicht mehr vor einer Wand steht.</p><p>Versuche das Pythonprogramm gut nachzuvollziehen, bevor du dir die Erklärung anschaust:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtle.Turtle()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strecke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> win </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.left(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    strecke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strecke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strecke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        win </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>:::detail Erklärung Tobi soll ein kleines Rennen bestreiten. Dazu muss er Strecke zurücklegen und gewinnen. Solange er nicht gewonnen hat, muss er immer weiter laufen (<code>win == False</code>). Nun läuft er 10 Schritte und es wird geprüft, ob er bereits mehr als 100 Schritte getan hat. Ist das der Fall, so hat er gewonnen <code>win = True</code> und die Bedingung <code>win == False</code> ist nicht mehr erfüllt. :::</p><div class="danger custom-block"><p class="custom-block-title">Warnung</p><p>Anders als in vielen Programmiersprachen wird der Inhalt der Schleife bei Python um eine Tabulatortaste eingerückt. Vergiss nie den Doppelpunkt am Ende der Schleife.</p></div><h2 id="aufgaben" tabindex="-1">Aufgaben <a class="header-anchor" href="#aufgaben" aria-label="Permalink to &quot;Aufgaben&quot;">​</a></h2><h3 id="aufgabe-1-einlass-kontrolle" tabindex="-1">Aufgabe 1: Einlass-Kontrolle <a class="header-anchor" href="#aufgabe-1-einlass-kontrolle" aria-label="Permalink to &quot;Aufgabe 1: Einlass-Kontrolle&quot;">​</a></h3><p>Schreibe ein Programm für eine Disco. Eine Person kommt nur rein, wenn sie:</p><ul><li>Mindestens 18 Jahre alt ist UND ein Ticket hat</li><li>ODER wenn sie VIP-Status hat (unabhängig vom Alter)</li></ul><h3 id="aufgabe-2-countdown" tabindex="-1">Aufgabe 2: Countdown <a class="header-anchor" href="#aufgabe-2-countdown" aria-label="Permalink to &quot;Aufgabe 2: Countdown&quot;">​</a></h3><p>Erstelle einen Countdown von 10 bis 0 mit einer while-Schleife. Tobi soll jede Zahl einzeln schreiben.</p><h3 id="aufgabe-3-wurfel-spiel" tabindex="-1">Aufgabe 3: Würfel-Spiel <a class="header-anchor" href="#aufgabe-3-wurfel-spiel" aria-label="Permalink to &quot;Aufgabe 3: Würfel-Spiel&quot;">​</a></h3><p>Simuliere das Würfeln, bis eine 6 kommt. Zähle dabei mit, wie oft gewürfelt wurde.</p><details class="details custom-block"><summary>Tipp</summary><p>Nutze <code>import random</code> und <code>random.randint(1,6)</code> für den Würfel.</p></details><h2 id="vorbereitung-fur-block-4" tabindex="-1">Vorbereitung für Block 4 <a class="header-anchor" href="#vorbereitung-fur-block-4" aria-label="Permalink to &quot;Vorbereitung für Block 4&quot;">​</a></h2><p>Überlege dir, wann man eine while-Schleife und wann man besser eine Schleife mit fester Anzahl von Wiederholungen verwenden würde.</p>`,27)]))}const g=e(t,[["render",l]]);export{c as __pageData,g as default};
